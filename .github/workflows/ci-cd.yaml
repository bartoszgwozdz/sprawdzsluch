name: CI/CD Pipeline

on:
  push:
    branches: [ main ]  # uruchomienie na push do main
  repository_dispatch:
    types: [deploy]            # wywołanie z API

jobs:
  build-and-deploy:
    runs-on: self-hosted

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      K8S_NAMESPACE: sprawdzsluch

    steps:
      # 1️⃣ Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Zaloguj do DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3️⃣ Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          use: true
          driver-opts: |
            image=moby/buildkit:latest

      # 4️⃣ Set up QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # 5️⃣ Build & push frontend (multi-arch)
      - name: Build & push frontend (multi-arch)
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}
          builder: ${{ steps.buildx.outputs.name }}

      # 6️⃣ Build & push backend-pdf (multi-arch)
      - name: Build & push backend-pdf (multi-arch)
        uses: docker/build-push-action@v4
        with:
          context: ./backend-pdf
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/backend-pdf:latest
            ${{ secrets.DOCKER_USERNAME }}/backend-pdf:${{ github.sha }}

      # 7️⃣ Build & push backend-core (multi-arch)
      - name: Build & push backend-core (multi-arch)
        uses: docker/build-push-action@v4
        with:
          context: ./backend-core
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/backend-core:latest
            ${{ secrets.DOCKER_USERNAME }}/backend-core:${{ github.sha }}

      # 8️⃣ Setup kubectl
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.30.0"

      # 9️⃣ Configure kubeconfig do VPS
      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      # 10️⃣ Utwórz Secret dla MongoDB
      - name: Create MongoDB Secret
        run: |
          kubectl -n $K8S_NAMESPACE create secret generic mongo-secret \
            --from-literal=mongo-root-username=${{ secrets.MONGO_ROOT_USERNAME }} \
            --from-literal=mongo-root-password=${{ secrets.MONGO_ROOT_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -

      # 11️⃣ Deploy wszystkie manifesty
      - name: Deploy all manifests
        run: |
          kubectl apply -f k8s/
          kubectl rollout status statefulset/mongodb -n $K8S_NAMESPACE
          kubectl rollout status deployment/frontend -n $K8S_NAMESPACE
          kubectl rollout status deployment/backend-pdf -n $K8S_NAMESPACE
          kubectl rollout status deployment/backend-core -n $K8S_NAMESPACE
